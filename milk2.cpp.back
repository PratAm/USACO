/*
ID: amarpra1
PROG: milk2
LANG: C++
*/

# define DEBUG if(1)

#include<iostream>
#include<fstream>
#include<vector>
#include<cassert>
#include <algorithm>

using namespace std;

struct farmer
{
		int start;
		int end;
		farmer():start(0),end(0){}
};

inline bool operator<(const farmer& a, const farmer& b)
{
	return a.start < b.start;
}

typedef struct farmer farmer;

int main(int argc,char **argv)
{
		ifstream fin("milk2.in");
		ofstream fout("milk2.out");
    
		int nofarmers = 0;
		std::vector<farmer> farmers;
		int maxidle=0;
    int maxactive =0;

		fin >> nofarmers;
    int start =0,end =0;

		for(int i =0;i<nofarmers;i++)
		{
				fin >> start >> end;
				farmer temp;
				temp.start = start;
				temp.end = end;
				farmers.push_back(temp);
		}


    std::sort(farmers.begin(),farmers.end());
    for(int i =0;i<nofarmers;i++)
    {
       cout << farmers[i].start <<":"<<farmers[i].end <<endl;
    }
  
 
		for(int i =0;i<nofarmers;i++)
		{
				int tempmax = farmers[i].end - farmers[i].start;
				for(int j = i+1; j<nofarmers ;j++)
				{
						if(farmers[j].start <= farmers[j-1].end and farmers[j].end > farmers[j-1].end)
						{
								tempmax += farmers[j].end - farmers[j-1].end;
						}else
						{
								continue;
						}
				}
				if(tempmax > maxactive)
				{
						maxactive = tempmax;
				}
		}

		bool found = false;
		for(int i =1;i < nofarmers;i++)
		{
			int tempidle = 0;
      if(farmers[i].start > farmers[i-1].end)
			{
					for (int j =0;j< nofarmers ;j++)
					{
							if(farmers[j].start <= farmers[i-1].end and farmers[j].end >= farmers[i].start)
							{
									found = true;
							}
					}
					if(not found)
					{
					  tempidle = farmers[i].start - farmers[i-1].end;
					}
			}
			if(tempidle > maxidle)
			{
					maxidle = tempidle;
			}
		}
    
		DEBUG cout << maxactive << endl;
		DEBUG cout << maxidle << endl;

		fout << maxactive << " "<<maxidle <<endl;
		fin.close();
		fout.close();


   return 0;
}


